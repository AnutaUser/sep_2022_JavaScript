// // - Створити клас або функцію конструктор, за допомоги якої можна створювати об'єкти наступного вигляду.
// // Конструктор повинен приймати значення для кожної властивості, в т.ч і для властивостей внутрішніх об'єктів
// //
// let user = {
//     id: 1,
//     name: 'Leanne Graham',
//     username: 'Bret',
//     email: 'Sincere@april.biz',
//     address: {
//         street: 'Kulas Light',
//         suite: 'Apt. 556',
//         city: 'Gwenborough',
//         zipcode: '92998-3874',
//         geo: {
//             lat: '-37.3159',
//             lng: '81.1496'
//         }
//     },
//     phone: '1-770-736-8031 x56442',
//     website: 'hildegard.org',
//     company: {
//         name: 'Romaguera-Crona',
//         catchPhrase: 'Multi-layered client-server neural-net',
//         bs: 'harness real-time e-markets'
//     }
// }
//
// // class User {
// //     id;
// //     name;
// //     username;
// //     email;
// //     address = {
// //         street,
// //         suite,
// //         city,
// //         zipcode,
// //         geo: {lat, lng}
// //     };
// //     phone;
// //     website;
// //     company = {
// //         name,
// //         catchPhrase,
// //         bs,
// //     };
// // }

// class User {
//     constructor(
//         id,
//         name,
//         username,
//         email,
//         // address,
//         address = {
//             street,
//             suite,
//             city,
//             zipcode,
//             geo: {lat, lng},
//         },
//         phone,
//         website,
//         company = {
//             cName: name,
//             catchPhrase,
//             bs
//         }
//     ) {
//         this.id = id;
//         this.name = name;
//         this.username = username;
//         this.email = email;
//         this.address = address;
//         this.address.street = address.street;
//         this.address.suite = address.suite;
//         this.address.city = address.city;
//         this.address.zipcode = address.zipcode;
//         this.address.geo = address.geo;
//         this.address.geo.lat = address.geo.lat;
//         this.address.geo.lng = address.geo.lng;
//         this.phone = phone;
//         this.website = website;
//         this.company = company;
//         // this.company.name = company.name;
//         // this.company.catchPhrase = company.catchPhrase;
//         // this.company.bs = company.bs;
//     }
// }
//
// let user1 = new User(
//     1,
//     'Alina',
//     'Alia',
//     'alia@.com',
//     {street: 'street', suite: 'suite', geo: {lat: 'sdf-15sv-123', lng: 'ool45'}},
//     '888 888 888',
//     'https://owu.com',
//     {name: 'yoooo', catchPhrase: 'gyubo', bs: 'bs1'}
// )
//
// console.log(user1);

// -  Створити функцію конструктор / клас  який описує об'єкт тегу
// Поля :
// - назва тегу ()
// - опис його дій
// - масив з атрибутами (2-3 атрибути максимум)
// Кожен атрибут описати як окремий який буде містити
// -назву атрибуту
// -опис дії атрибуту
// інформацію брати з htmlbook.ru
//
// Таким чином описати теги
// -a
// -div
// -h1
// -span
// -input
// -form
// -option
// -select

// Приклад результуючого об'єкту
// {
//     titleOfTag: 'area',
//     action: `Каждый элемент <area> определяет активные области изображения, которые являются ссылками...`,
//     attrs: [
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к области с помощью комбинации клавиш'},
//         {/*some props and values*/},
//         {/*...*/},
//         {/*...*/},
//     ]
// }

class Tag {
    constructor(
        titleOfTag,
        action,
        attrs = []
    ) {
        this.titleOfTag = titleOfTag;
        this.action = action;
        this.attrs = attrs;
    }
}

// const aTag = new Tag(
//     'Тег <a>',
//     'Тег <a> является одним из важных элементов HTML и предназначен для создания ' +
//             'ссылок. В зависимости от присутствия атрибутов name или href тег <a> устанавливает ' +
//                 'ссылку или якорь. Якорем называется закладка внутри страницы, которую можно указать в качестве цели ссылки. При использовании ссылки, которая указывает на якорь, происходит переход к закладке внутри веб-страницы.',
//     [
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Активация ссылки с помощью комбинации клавиш.'},
//         {titleOfAttr: 'coords', titleOfTag: 'Устанавливает координаты активной области.'},
//         {titleOfAttr: 'download', titleOfTag: 'Предлагает скачать указанный по ссылке файл.'},
//         {titleOfAttr: 'href', titleOfTag: 'Задает адрес документа, на который следует перейти.'},
//         {titleOfAttr: 'hreflang', titleOfTag: 'Идентифицирует язык текста по ссылке.'},
//         {titleOfAttr: 'name', titleOfTag: 'Устанавливает имя якоря внутри документа.'},
//         {titleOfAttr: 'rel', titleOfTag: 'Отношения между ссылаемым и текущим документами.'},
//         {titleOfAttr: 'rev', titleOfTag: 'Отношения между текущим и ссылаемым документами.'},
//         {titleOfAttr: 'shape', titleOfTag: 'Задает форму активной области ссылки для изображений.'},
//         {titleOfAttr: 'tabindex', titleOfTag: 'Определяет последовательность перехода между ссылками при нажатии на кнопку Tab.'},
//         {titleOfAttr: 'target', titleOfTag: 'Имя окна или фрейма, куда браузер будет загружать документ.'},
//         {titleOfAttr: 'title', titleOfTag: 'Добавляет всплывающую подсказку к тексту ссылки.'},
//         {titleOfAttr: 'type', titleOfTag: 'Указывает MIME-тип документа, на который ведёт ссылка.'},
// ],
// );
//
// console.log(aTag);

// const divTag = new Tag(
//     '<div></div>',
//     'Элемент <div> является блочным элементом и предназначен для выделения фрагмента документа с целью изменения вида содержимого. Как правило, вид блока управляется с помощью стилей. Чтобы не описывать каждый раз стиль внутри тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.\n' +
//     'Как и при использовании других блочных элементов, содержимое тега <div> всегда начинается с новой строки. После' +
//     ' него также добавляется перенос строки.',
//     [
//         {titleOfAttr: 'aline', actionOfAttr: 'Задает выравнивание содержимого тега <div>.'},
//         {titleOfAttr: 'title', actionOfAttr: 'Добавляет всплывающую подсказку к содержимому.'}
//     ]
// );
//
// console.log(divTag);

// const h1Tag = new Tag(
//     '<h1></h1>',
//     'HTML предлагает шесть заголовков разного уровня, которые показывают относительную важность секции, ' +
//     'расположенной после заголовка. Так, тег <h1> представляет собой наиболее важный заголовок первого уровня, а тег ' +
//     '<h6> служит для обозначения заголовка шестого уровня и является наименее значительным. По умолчанию, заголовок ' +
//     'первого уровня отображается самым крупным шрифтом жирного начертания, заголовки последующего уровня по размеру ' +
//     'меньше. Теги <h1>,...,<h6> относятся к блочным элементам, они всегда начинаются с новой строки, а после них другие ' +
//     'элементы отображаются на следующей строке. Кроме того, перед заголовком и после него добавляется пустое пространство.',
//     [
//         {titleOfAttr: 'aline', actionOfAttr: 'Определяет выравнивание заголовка.'},
//     ]
// );
//
// console.log(h1Tag);

// const spanTag = new Tag(
//     '<span></span>',
//     'Тег <span> предназначен для определения строчных элементов документа. В отличие от блочных элементов, таких ' +
//     'как <table>, <p> или <div>, с помощью тега <span> можно выделить часть информации внутри других тегов и установить ' +
//     'для нее свой стиль. Например, внутри абзаца (тега <p>) можно изменить цвет и размер первой буквы, если добавить ' +
//     'начальный и конечный тег <span> и определить для него стиль текста. Чтобы не описывать каждый раз стиль внутри ' +
//     'тега, можно выделить стиль во внешнюю таблицу стилей, а для тега добавить атрибут class или id с именем селектора.',
//     ['Для этого тега доступны универсальные атрибуты и события.']
// );
//
// console.log(spanTag);

// const inputTag = new Tag(
//     '<input>',
//     'Тег <input> является одним из разносторонних элементов формы и позволяет создавать разные элементы интерфейса' +
//     ' и обеспечить взаимодействие с пользователем. Главным образом <input> предназначен для создания текстовых полей, ' +
//     'различных кнопок, переключателей и флажков. Хотя элемент <input> не требуется помещать внутрь контейнера <form>, ' +
//     'определяющего форму, но если введенные пользователем данные должны быть отправлены на сервер, где их обрабатывает ' +
//     'серверная программа, то указывать <form> обязательно. То же самое обстоит и в случае обработки данных с помощью ' +
//     'клиентских приложений, например, скриптов на языке JavaScript.' +
//     'Основной атрибут тега <input>, определяющий вид элемента — type. Он позволяет задавать следующие элементы формы:' +
//     ' текстовое поле (text), поле с паролем (password), переключатель (radio), флажок (checkbox), скрытое поле (hidden),' +
//     ' кнопка (button), кнопка для отправки формы (submit), кнопка для очистки формы (reset), поле для отправки' +
//     ' файла (file) и кнопка с изображением (image). Для каждого элемента существует свой список атрибутов, которые ' +
//     'определяют его вид и характеристики. Кроме того, в HTML5 добавлено еще более десятка новых элементов.',
//     [
//         {titleOfAttr: 'accept', actionOfAttr: 'Устанавливает фильтр на типы файлов, которые вы можете отправить через' +
//                 ' поле загрузки файлов.'},
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Переход к элементу с помощью комбинации клавиш.'},
//         {titleOfAttr: 'aline', actionOfAttr: 'Определяет выравнивание изображения.'},
//         {titleOfAttr: 'alt', actionOfAttr: 'Альтернативный текст для кнопки с изображением.'},
//         {titleOfAttr: 'autocomplete', actionOfAttr: 'Включает или отключает автозаполнение.'},
//         {titleOfAttr: 'autofocus', actionOfAttr: 'Устанавливает фокус в поле формы.'},
//         {titleOfAttr: 'border', actionOfAttr: 'Толщина рамки вокруг изображения.'},
//         {titleOfAttr: 'checked', actionOfAttr: 'Предварительно активированный переключатель или флажок.'},
//         {titleOfAttr: 'form', actionOfAttr: 'Связывает поле с формой по её идентификатору.'},
//         {titleOfAttr: 'formaction', actionOfAttr: 'Определяет адрес обработчика формы.'},
//         {titleOfAttr: 'formenctype', actionOfAttr: 'Устанавливает способ кодирования данных формы при их отправке на сервер.'},
//         {titleOfAttr: 'formmethod', actionOfAttr: 'Сообщает браузеру каким методом следует передавать данные формы на сервер.'},
//         {titleOfAttr: 'formnovalidate', actionOfAttr: 'Отменяет встроенную проверку данных на корректность.'},
//         {titleOfAttr: 'formtarget', actionOfAttr: 'Определяет окно или фрейм в которое будет загружаться результат, возвращаемый обработчиком формы.'},
//         {titleOfAttr: 'list', actionOfAttr: 'Указывает на список вариантов, которые можно выбирать при вводе текста.'},
//         {titleOfAttr: 'max', actionOfAttr: 'Верхнее значение для ввода числа или даты.'},
//         {titleOfAttr: 'maxlength', actionOfAttr: 'Максимальное количество символов разрешенных в тексте.'},
//         {titleOfAttr: 'min', actionOfAttr: 'Нижнее значение для ввода числа или даты.'},
//         {titleOfAttr: 'multiple', actionOfAttr: 'Позволяет загрузить несколько файлов одновременно.'},
//         {titleOfAttr: 'name', actionOfAttr: 'Имя поля, предназначено для того, чтобы обработчик формы мог его идентифицировать.'},
//         {titleOfAttr: 'pattern', actionOfAttr: 'Устанавливает шаблон ввода.'},
//         {titleOfAttr: 'placeholder', actionOfAttr: 'Выводит подсказывающий текст.'},
//         {titleOfAttr: 'readonly', actionOfAttr: 'Устанавливает, что поле не может изменяться пользователем.'},
//         {titleOfAttr: 'required', actionOfAttr: 'Обязательное для заполнения поле.'},
//         {titleOfAttr: 'size', actionOfAttr: 'Ширина текстового поля.'},
//         {titleOfAttr: 'src', actionOfAttr: 'Адрес графического файла для поля с изображением.'},
//         {titleOfAttr: 'step', actionOfAttr: 'Шаг приращения для числовых полей.'},
//         {titleOfAttr: 'tabindex', actionOfAttr: 'Определяет порядок перехода между элементами с помощью клавиши Tab.'},
//         {titleOfAttr: 'type', actionOfAttr: 'Сообщает браузеру, к какому типу относится элемент формы.'},
//         {titleOfAttr: 'value', actionOfAttr: 'Значение элемента.'},
//         'Также для этого тега доступны универсальные атрибуты и события.'
//     ]
// );
//
// console.log(inputTag);

// const formTag = new Tag(
//     '<form></form>',
//     'Связывает поле с формой по её идентификатору. Такая связь необходима в случае, когда поле располагается за ' +
//     'пределами <form>, например, при создании её программно или по соображениям дизайна.',
// );
//
// console.log(formTag);

// const optionTag = new Tag(
//     '<option></option>',
//     'Тег <option> определяет отдельные пункты списка, создаваемого с помощью контейнера <select>. Ширина списка ' +
//     'определяется самым широким текстом, указанным в теге <option>, а также может изменяться с помощью стилей. Если ' +
//     'планируется отправлять данные списка на сервер, то требуется поместить элемент <select> внутрь формы. Это также ' +
//     'необходимо, когда к данным списка идет обращение через скрипты.',
//     [
//         {titleOfAttr: 'disabled', actionOfAttr: 'Заблокировать для доступа элемент списка.'},
//         {titleOfAttr: 'label', actionOfAttr: 'Указание метки пункта списка.'},
//         {titleOfAttr: 'selected', actionOfAttr: 'Заранее устанавливает определенный пункт списка выделенным.'},
//         {titleOfAttr: 'value', actionOfAttr: 'Значение пункта списка, которое будет отправлено на сервер или прочитано с помощью скриптов.'},
//         'Также для этого тега доступны универсальные атрибуты и события.'
//     ]
// );
//
// console.log(optionTag);

// const selectTag = new Tag(
//     '<select></select>',
//     'Тег <select> позволяет создать элемент интерфейса в виде раскрывающегося списка, а также список с одним или' +
//     ' множественным выбором, как показано далее. Конечный вид зависит от использования атрибута size тега <select>, ' +
//     'который устанавливает высоту списка. Ширина списка определяется самым широким текстом, указанным в теге <option>, ' +
//     'а также может изменяться с помощью стилей. Каждый пункт создается с помощью тега <option>, который должен быть ' +
//     'вложен в контейнер <select>. Если планируется отправлять данные списка на сервер, то требуется поместить элемент ' +
//     '<select> внутрь формы. Это также необходимо, когда к данным списка идет обращение через скрипты.',
//     [
//         {titleOfAttr: 'accesskey', actionOfAttr: 'Позволяет перейти к списку с помощью некоторого сочетания клавиш.'},
//         {titleOfAttr: 'autofocus', actionOfAttr: 'Устанавливает, что список получает фокус после загрузки страницы.'},
//         {titleOfAttr: 'disabled', actionOfAttr: 'Блокирует доступ и изменение элемента.'},
//         {titleOfAttr: 'form', actionOfAttr: 'Связывает список с формой.'},
//         {titleOfAttr: 'multiple', actionOfAttr: 'Позволяет одновременно выбирать сразу несколько элементов списка.'},
//         {titleOfAttr: 'name', actionOfAttr: 'Имя элемента для отправки на сервер или обращения через скрипты.'},
//         {titleOfAttr: 'equired', actionOfAttr: 'Список обязателен для выбора перед отправкой формы.'},
//         {titleOfAttr: 'size', actionOfAttr: 'Количество отображаемых строк списка.'},
//         {titleOfAttr: 'tabindex', actionOfAttr: 'Определяет последовательность перехода между элементами при нажатии на клавишу Tab'},
//     ]
// );
//
// console.log(selectTag);

